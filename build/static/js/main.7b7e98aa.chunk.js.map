{"version":3,"sources":["modals/CreateTask.js","modals/EditTask.js","components/Card.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTaskPopup","modal","toggle","save","useState","taskName","setTaskName","description","setDescription","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","type","onChange","rows","ModalFooter","Button","color","onClick","taskObj","EditTaskPopup","updateTask","useEffect","Name","Description","preventDefault","tempObj","Card","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","style","position","right","bottom","cursor","EditTask","obj","TodoList","taskList","setTaskList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","CreateTask","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b7e98aa.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst CreateTaskPopup = ({modal, toggle, save}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        const {name, value} = e.target\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n    }\r\n\r\n    const handleSave = () => {\r\n        let taskObj = {}\r\n        taskObj[\"Name\"] = taskName\r\n        taskObj[\"Description\"] = description\r\n        save(taskObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle} >Create Task</ModalHeader>\r\n                <ModalBody>\r\n                <form>\r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type = \"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name=\"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name=\"description\"></textarea>\r\n                    </div>\r\n                </form>\r\n                </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\r\n                <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTaskPopup;","import React, { useState , useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskName(taskObj.Name)\r\n        setDescription(taskObj.Description)\r\n    },[])\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let tempObj = {}\r\n        tempObj['Name'] = taskName\r\n        tempObj['Description'] = description\r\n        updateTask(tempObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTaskPopup;","import React, { useState } from \"react\";\r\nimport EditTask from \"../modals/EditTask\";\r\n\r\nconst Card = ({ taskObj, index, deleteTask, updateListArray }) => {\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const colors = [\r\n    {\r\n      primaryColor: \"#5D93E1\",\r\n      secondaryColor: \"#ECF3FC\",\r\n    },\r\n    {\r\n      primaryColor: \"#F9D288\",\r\n      secondaryColor: \"#FEFAF1\",\r\n    },\r\n    {\r\n      primaryColor: \"#5DC250\",\r\n      secondaryColor: \"#F2FAF1\",\r\n    },\r\n    {\r\n      primaryColor: \"#F48687\",\r\n      secondaryColor: \"#FDF1F1\",\r\n    },\r\n    {\r\n      primaryColor: \"#B964F7\",\r\n      secondaryColor: \"#F3F0FD\",\r\n    },\r\n  ];\r\n\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  const updateTask = (obj) => {\r\n    updateListArray(obj, index);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    deleteTask(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-wrapper mr-5\">\r\n      <div\r\n        className=\"card-top\"\r\n        style={{ \"background-color\": colors[index % 5].primaryColor }}\r\n      ></div>\r\n      <div className=\"task-holder\">\r\n        <span\r\n          className=\"card-header\"\r\n          style={{\r\n            \"background-color\": colors[index % 5].secondaryColor,\r\n            color: \"#49111c\",\r\n            \"font-weight\": \"bold\",\r\n            \"border-radius\": \"10px\",\r\n          }}\r\n        >\r\n          {taskObj.Name}\r\n        </span>\r\n        <p className=\"mt-3\" style={{ color: \"white\" }}>\r\n          {taskObj.Description}\r\n        </p>\r\n\r\n        <div style={{ position: \"absolute\", right: \"20px\", bottom: \"20px\" }}>\r\n          <i\r\n            className=\"far fa-edit \"\r\n            style={{\r\n              color: colors[index % 5].primaryColor,\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={() => setModal(true)}\r\n          ></i>\r\n          <i\r\n            className=\"fas fa-trash-alt\"\r\n            style={{\r\n              color: colors[index % 5].primaryColor,\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={handleDelete}\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      <EditTask\r\n        modal={modal}\r\n        toggle={toggle}\r\n        updateTask={updateTask}\r\n        taskObj={taskObj}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, {useEffect, useState} from 'react';\r\nimport CreateTask from '../modals/CreateTask'\r\nimport Card from './Card';\r\n\r\nconst TodoList = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const [taskList, setTaskList] = useState([])\r\n    \r\n    useEffect(() => {\r\n        let arr = localStorage.getItem(\"taskList\")\r\n       \r\n        if(arr){\r\n            let obj = JSON.parse(arr)\r\n            setTaskList(obj)\r\n        }\r\n    }, [])\r\n\r\n\r\n    const deleteTask = (index) => {\r\n        let tempList = taskList\r\n        tempList.splice(index, 1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const updateListArray = (obj, index) => {\r\n        let tempList = taskList\r\n        tempList[index] = obj\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const saveTask = (taskObj) => {\r\n        let tempList = taskList\r\n        tempList.push(taskObj)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(taskList)\r\n        setModal(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className = \"header\">\r\n                <h2>TODO LIST</h2>\r\n                <button className = \"btn btn-primary mt-2\" onClick = {() => setModal(true)} >Create Task</button>\r\n            </div>\r\n            <div className = \"task-container\">\r\n            {taskList && taskList.map((obj , index) => <Card taskObj = {obj} index = {index} deleteTask = {deleteTask} updateListArray = {updateListArray}/> )}\r\n            </div>\r\n            <CreateTask toggle = {toggle} modal = {modal} save = {saveTask}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import './App.css';\nimport TodoList from './components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}